{"version":3,"sources":["utils/consts.ts","hooks/AuthHandler.ts","utils/authUtils.ts","contexts/AuthContext.tsx","svg/PianoKeyboard.ts","utils/chordViewerUtils.ts","hooks/useNotificationHandler.ts","contexts/NotificationContext.tsx","components/chords-viewer/AddToPartitionButton.tsx","components/chords-viewer/ChordViewer.tsx","hooks/useReactRouter.ts","components/selector/ChordSelector.tsx","utils/routerUtils.ts","components/selector/InstrumentSelector.tsx","model/FetchError.ts","utils/fetchUtils.ts","services/loginService.ts","components/Login.tsx","components/MySnackbarContentWrapper.tsx","components/partitions/PartitionList.tsx","components/partitions/NewPartitionEditor.tsx","components/TooltipChord.tsx","components/partitions/PartitionViewer.tsx","components/ResponsiveDialog.tsx","components/partitions/PartitionEditor.tsx","components/MainComponents.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DEFAULT_USER_AUTH","id","username","expire","Date","DEFAULT_NOTIFICATION","message","undefined","type","ENDPOINT","useAuthHandler","initialState","_React$useState","React","useState","_React$useState2","Object","slicedToArray","auth","setAuth","setAuthStatus","inputUserAuth","userAuth","objectSpread","now","window","localStorage","setItem","JSON","stringify","setUnauthStatus","clear","authContext","createContext","Provider","AuthProvider","_ref","children","_useAuthHandler","jsonAuth","getItem","parse","valueOf","getStoredUserAuth","react_default","a","createElement","value","pianoSVG","Serializer","XMLSerializer","blackListBlackKeys","corBlackKeysEn","Csharp","Db","Dsharp","Eb","Fsharp","Gb","Gsharp","Ab","Asharp","Bb","keyOrder","C","D","E","F","G","A","B","getGuitarUkuleleSvg","chord","instrumentName","theme","chordColor","defaultColor","data","selector","document","position","length","name","key","chords","frets","map","fret","index","finger","fingers","baseFret","barres","barre","chordsNumber","minFret","maxFret","forEach","fromString","toString","barreInterpretor","ChordBox","numStrings","width","SVG_SIZE","height","draw","useNotificationHandler","setMessage","_React$useState3","_React$useState4","timeout","setTimeout","_React$useState5","_React$useState6","setType","notification","showNotification","notificationMessage","notificationType","arguments","clearTimeout","timeoutValue","closeNotification","notificationContext","NotificationProvider","_useNotificationHandl","NotificationContext_Provider","Visibility","MODIFY_PARTITION","gql","_templateObject2","AddToPartitionButton","userId","chordId","instrumentId","_useState","_useState2","anchorEl","setAnchorEl","_useQuery","useQuery","_templateObject","addToPartitionButtonQuery","loading","error","_useMutation","useMutation","_useMutation2","modifyPartition","_useMutation2$","mutationLoading","mutationError","notificationHandler","useContext","handleClickPartition","_ref2","asyncToGenerator","regenerator_default","mark","_callee","partition","partitionChords","partitionInput","res","wrap","_context","prev","next","push","instrument","ownerId","content","visibility","variables","sent","t0","console","log","stop","_x","apply","this","Button","onClick","event","currentTarget","Menu","keepMounted","open","Boolean","onClose","partitionsFromUserForInstrument","findIndex","MenuItem","ChordViewer","svgGuitar","svgUkulele","mainKey","suffix","isInPartition","useTheme","ChordViewer_templateObject","chordQueryBuilder","svg","chordFromName","info","piano","DOMParser","parseFromString","PianoSVG","pianoKeys","getElementsByClassName","item","pianoKey","classList","contains","setAttribute","firstKey","includes","keyToSelect","getElementById","isOctave2","i","currentKey","serializeToString","renderPianoSvg","palette","Grid","container","spacing","direction","alignItems","xs","dangerouslySetInnerHTML","__html","chords_viewer_AddToPartitionButton","outerHTML","useReactRouter","forceUpdate","useForceUpdate","routerContext","__RouterContext","useEffect","history","listen","useStyles","makeStyles","createStyles","root","display","flexWrap","formControl","margin","minWidth","selectEmpty","marginTop","ChordSelector","noViewer","ChordSelector_templateObject","chordForInstrumentQueryBuilder","router","classes","keyParam","match","params","suffixParam","values","setValues","handleChange","oldValues","defineProperty","target","pathToGo","replace","join","keys","suffixes","FormControl","className","InputLabel","htmlFor","Select","onChange","inputProps","chords_viewer_ChordViewer","TabPanel","props","other","objectWithoutProperties","Typography","assign","component","role","hidden","concat","aria-labelledby","Box","p","flexGrow","INSTRUMENT_QUERY","InstrumentSelector_templateObject","InstrumentSelector","instrumentParam","setValue","routeInfos","setRouteInfos","dataToDisplay","instruments","elem","Tabs","newValue","location","pathname","newHistory","CHORD_VIEWER_BASE_ROUTE","centered","Tab","label","aria-controls","a11yProps","selector_ChordSelector","FetchError","code","classCallCheck","_code","_message","createClass","get","fetchBuilder","url","method","headers","body","fetchHeaders","Headers","append","fetch","cache","mode","credentials","fetchHandler","_x2","_x3","_x4","_fetchHandler","response","resJson","json","ok","status","statusText","abrupt","t1","authenticate","_authenticate","password","fetchRes","URLSearchParams","URL","register","_register","_callee2","_context2","isAuth","_isAuth","_callee3","_context3","logOut","_logOut","_callee4","_context4","handleLogOutButtonClick","_ref4","Login","usernameInput","setUsernameInput","_useState3","_useState4","passwordInput","setPasswordInput","handleLoginButtonClick","userData","handleRegisterButtonClick","handleIsAuthButtonClick","_ref3","justify","style","minHeight","Paper","padding","TextField","ev","variantIcon","success","CheckCircleIcon","warning","WarningIcon","ErrorIcon","InfoIcon","useStyles1","backgroundColor","green","dark","primary","main","amber","icon","fontSize","iconVariant","opacity","marginRight","MySnackbarContentWrapper","variant","Icon","SnackbarContent","clsx","aria-describedby","action","IconButton","aria-label","color","Close_default","PARTITIONS_QUERY","PartitionList_templateObject","fab","bottom","right","card","maxWidth","PartitionList","fetchPolicy","partitions","partitionId","PARTITION_BASE_ROUTE","Card","CardActionArea","CardContent","gutterBottom","owner","getCardFromPartition","Fab","Link","to","PARTITION_EDITOR_BASE_ROUTE","Add_default","INSTRUMENT_LIST_QUERY","NewPartitionEditor_templateObject","NEW_PARTITION_MUTATION","NewPartitionEditor_templateObject2","NewPartitionEditor","partitionName","setPartitionName","inputError","setInputError","_useState5","_useState6","instrumentSelected","setInstrumentSelected","_useState7","_useState8","selectInstrumentError","setSelectInstrumentError","_useState9","_useState10","selectVisibilityError","setSelectVisibilityError","_useState11","PUBLIC","_useState12","visibilitySelected","setVisibilitySelected","createPartition","handleCreatePartitionClick","handleSelectChange","handleSelectVisibilityChange","PRIVATE","NoBackgroundTooltip","withStyles","tooltip","Tooltip","TooltipChord","chordKey","chordSuffix","disableFocusListener","disableTouchListener","placement","title","fontWeight","getJsxFromContentWithTooltip","chordList","contentList","elementToFind","newContentList","splittedContent","split","filledSplittedContent","toConsumableArray","occurencesSplitter","finalContentList","contentElem","pos","find","PartitionViewer","PartitionViewer_templateObject","components_TooltipChord","esm","Marked","options","overrides","Edit_default","ResponsiveDialog","buttonAccept","buttonRefuse","handleAccept","handleRefuse","handleClose","fullScreen","useMediaQuery","breakpoints","down","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","PartitionEditor_templateObject2","DELETE_PARTITION","_templateObject3","PartitionEditor","PartitionEditor_templateObject","partitionContent","setPartitionContent","toDeleteChord","setToDeleteChord","_useMutation3","deletePartition","openDialog","setOpenDialog","handleClickButton","newChords","filter","handleAcceptDelete","closeDialog","defaultValue","fontStyle","List","ListItem","ListItemText","primaryTypographyProps","textDecoration","ListItemSecondaryAction","edge","SettingsBackupRestore_default","Clear_default","rel","href","lib","language","selectOnLineNumbers","red","components_ResponsiveDialog","menuButton","list","fullList","MainComponent","onToggleDark","drawer","setDrawer","reason","toggleDrawer","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","components_MySnackbarContentWrapper","react_router_dom","AppBar","Toolbar","Menu_default","ButtonGroup","Drawer","onKeyDown","button","ListItemIcon","InvertColors_default","react_router","path","render","selector_InstrumentSelector","exact","client","ApolloClient","uri","App","localStorageTheme","defaultTheme","setTheme","muiTheme","createMuiTheme","react_common_esm","AuthContext","NotificationContext","MuiThemeProvider","CssBaseline","MainComponents","hostname","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70d6d8c8.chunk.js","sourcesContent":["import { UserAuth } from \"../model/UserAuth\";\nimport { Notification } from \"../model/Notification\";\n\nexport const DEFAULT_USER_AUTH: UserAuth = {id: '0', username: '', expire: new Date(0)};\n\nexport const DEFAULT_NOTIFICATION: Notification = {message: undefined, type: 'info'};\n\nexport const ENDPOINT = 'https://chord-server.herokuapp.com/';\n\n","import React from 'react';\nimport { UserAuth, InputUserAuth } from '../model/UserAuth';\nimport { DEFAULT_USER_AUTH } from '../utils/consts';\nimport { getDatePlusOneHour } from '../utils/authUtils';\n\nconst useAuthHandler = (initialState: UserAuth) => {\n  const [auth, setAuth] = React.useState(initialState);\n\n  const setAuthStatus = (inputUserAuth: InputUserAuth) => {\n    // TODO: Add cookie time (1h)\n    let userAuth: UserAuth = {\n      expire: getDatePlusOneHour(),\n      ...inputUserAuth\n    }\n    window.localStorage.setItem(\"UserAuth\", JSON.stringify(userAuth));\n    setAuth(userAuth);\n  };\n\n  const setUnauthStatus = () => {\n    window.localStorage.clear();\n    setAuth(DEFAULT_USER_AUTH);\n  };\n\n  return {\n    auth,\n    setAuthStatus,\n    setUnauthStatus\n  };\n};\n\nexport default useAuthHandler;","import { UserAuth } from \"../model/UserAuth\";\nimport { DEFAULT_USER_AUTH } from \"./consts\";\n\nexport const getStoredUserAuth = (): UserAuth => {\n  // TODO: Attnetion si le cookie n'est plus valide\n  // TODO: Check cookie time\n  const jsonAuth = window.localStorage.getItem(\"UserAuth\");\n  if (jsonAuth) {\n    let auth = JSON.parse(jsonAuth);\n    auth.expire = new Date(auth.expire)\n    if (auth.expire.valueOf() > Date.now()) {\n      return auth;\n    }\n  }\n  return DEFAULT_USER_AUTH;\n}\n\nexport const getDatePlusOneHour = (): Date => {\n  return new Date(Date.now() + 1 * 60 * 60 * 1000);\n}\n","import React from 'react';\nimport { UserAuth, InputUserAuth } from '../model/UserAuth';\nimport { DEFAULT_USER_AUTH } from '../utils/consts';\nimport useAuthHandler from '../hooks/AuthHandler';\nimport { getStoredUserAuth } from '../utils/authUtils';\n\nexport interface IAuthContextInterface {\n  auth: UserAuth;\n  setAuthStatus: (inputUserAuth: InputUserAuth) => void;\n  setUnauthStatus: () => void;\n}\n\nexport const authContext =\n  React.createContext<IAuthContextInterface>({\n    auth: DEFAULT_USER_AUTH,\n    setAuthStatus: () => {},\n    setUnauthStatus: () => {}\n  })\n\nconst { Provider } = authContext;\n\nconst AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { auth, setAuthStatus, setUnauthStatus } = useAuthHandler( getStoredUserAuth() );\n\n  return (\n    <Provider value={{ auth, setAuthStatus, setUnauthStatus }}>\n      {children}\n    </Provider>\n  );\n\n};\n\nexport default AuthProvider;\n","const pianoSVG = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg width=\"100%\" viewBox=\"0 0 1120 400\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <title>Piano Keyboard</title>\n  <defs></defs>\n    <g id=\"piano-keyboard\">\n      <g id=\"octave-1\">\n        <rect id=\"octave-1-C-key\" class=\"piano-key white-key\" data-piano-key=\"C\" stroke=\"#555555\" fill=\"#FFFFF7\" x=\"0\" y=\"0\" width=\"80\" height=\"400\"></rect>\n        <rect id=\"octave-1-D-key\" class=\"piano-key white-key\" data-piano-key=\"D\" stroke=\"#555555\" fill=\"#FFFFF7\" x=\"80\" y=\"0\" width=\"80\" height=\"400\"></rect>\n        <rect id=\"octave-1-E-key\" class=\"piano-key white-key\" data-piano-key=\"E\" stroke=\"#555555\" fill=\"#FFFFF7\" x=\"160\" y=\"0\" width=\"80\" height=\"400\"></rect>\n        <rect id=\"octave-1-F-key\" class=\"piano-key white-key\" data-piano-key=\"F\" stroke=\"#555555\" fill=\"#FFFFF7\" x=\"240\" y=\"0\" width=\"80\" height=\"400\"></rect>\n        <rect id=\"octave-1-G-key\" class=\"piano-key white-key\" data-piano-key=\"G\" stroke=\"#555555\" fill=\"#FFFFF7\" x=\"320\" y=\"0\" width=\"80\" height=\"400\"></rect>\n        <rect id=\"octave-1-A-key\" class=\"piano-key white-key\" data-piano-key=\"A\" stroke=\"#555555\" fill=\"#FFFFF7\" x=\"400\" y=\"0\" width=\"80\" height=\"400\"></rect>\n        <rect id=\"octave-1-B-key\" class=\"piano-key white-key\" data-piano-key=\"B\" stroke=\"#555555\" fill=\"#FFFFF7\" x=\"480\" y=\"0\" width=\"80\" height=\"400\"></rect>\n        <rect id=\"octave-1-Csharp-key\" class=\"piano-key black-key\" data-piano-key=\"Csharp\" stroke=\"#979797\" fill=\"#4B4B4B\" x=\"60\" y=\"0\" width=\"40\" height=\"280\"></rect>\n        <rect id=\"octave-1-Dsharp-key\" class=\"piano-key black-key\" data-piano-key=\"Dsharp\" stroke=\"#979797\" fill=\"#4B4B4B\" x=\"140\" y=\"0\" width=\"40\" height=\"280\"></rect>\n        <rect id=\"octave-1-Fsharp-key\" class=\"piano-key black-key\" data-piano-key=\"Fsharp\" stroke=\"#979797\" fill=\"#4B4B4B\" x=\"300\" y=\"0\" width=\"40\" height=\"280\"></rect>\n        <rect id=\"octave-1-Gsharp-key\" class=\"piano-key black-key\" data-piano-key=\"Gsharp\" stroke=\"#979797\" fill=\"#4B4B4B\" x=\"380\" y=\"0\" width=\"40\" height=\"280\"></rect>\n        <rect id=\"octave-1-Asharp-key\" class=\"piano-key black-key\" data-piano-key=\"Asharp\" stroke=\"#979797\" fill=\"#4B4B4B\" x=\"460\" y=\"0\" width=\"40\" height=\"280\"></rect>\n      </g>\n      <g id=\"octave-2\" transform=\"translate(560.000000, 0.000000)\">\n        <rect id=\"octave-2-C-key\" class=\"piano-key white-key\" data-piano-key=\"C\" stroke=\"#555555\" fill=\"#FFFFF7\" x=\"0\" y=\"0\" width=\"80\" height=\"400\"></rect>\n        <rect id=\"octave-2-D-key\" class=\"piano-key white-key\" data-piano-key=\"D\" stroke=\"#555555\" fill=\"#FFFFF7\" x=\"80\" y=\"0\" width=\"80\" height=\"400\"></rect>\n        <rect id=\"octave-2-E-key\" class=\"piano-key white-key\" data-piano-key=\"E\" stroke=\"#555555\" fill=\"#FFFFF7\" x=\"160\" y=\"0\" width=\"80\" height=\"400\"></rect>\n        <rect id=\"octave-2-F-key\" class=\"piano-key white-key\" data-piano-key=\"F\" stroke=\"#555555\" fill=\"#FFFFF7\" x=\"240\" y=\"0\" width=\"80\" height=\"400\"></rect>\n        <rect id=\"octave-2-G-key\" class=\"piano-key white-key\" data-piano-key=\"G\" stroke=\"#555555\" fill=\"#FFFFF7\" x=\"320\" y=\"0\" width=\"80\" height=\"400\"></rect>\n        <rect id=\"octave-2-A-key\" class=\"piano-key white-key\" data-piano-key=\"A\" stroke=\"#555555\" fill=\"#FFFFF7\" x=\"400\" y=\"0\" width=\"80\" height=\"400\"></rect>\n        <rect id=\"octave-2-B-key\" class=\"piano-key white-key\" data-piano-key=\"B\" stroke=\"#555555\" fill=\"#FFFFF7\" x=\"480\" y=\"0\" width=\"80\" height=\"400\"></rect>\n        <rect id=\"octave-2-Csharp-key\" class=\"piano-key black-key\" data-piano-key=\"Csharp\" stroke=\"#979797\" fill=\"#4B4B4B\" x=\"60\" y=\"0\" width=\"40\" height=\"280\"></rect>\n        <rect id=\"octave-2-Dsharp-key\" class=\"piano-key black-key\" data-piano-key=\"Dsharp\" stroke=\"#979797\" fill=\"#4B4B4B\" x=\"140\" y=\"0\" width=\"40\" height=\"280\"></rect>\n        <rect id=\"octave-2-Fsharp-key\" class=\"piano-key black-key\" data-piano-key=\"Fsharp\" stroke=\"#979797\" fill=\"#4B4B4B\" x=\"300\" y=\"0\" width=\"40\" height=\"280\"></rect>\n        <rect id=\"octave-2-Gsharp-key\" class=\"piano-key black-key\" data-piano-key=\"Gsharp\" stroke=\"#979797\" fill=\"#4B4B4B\" x=\"380\" y=\"0\" width=\"40\" height=\"280\"></rect>\n        <rect id=\"octave-2-Asharp-key\" class=\"piano-key black-key\" data-piano-key=\"Asharp\" stroke=\"#979797\" fill=\"#4B4B4B\" x=\"460\" y=\"0\" width=\"40\" height=\"280\"></rect>\n      </g>\n    </g>\n</svg>`\n\nexport default pianoSVG;\n","import PianoSVG from '../svg/PianoKeyboard';\nimport { IPianoChord, blackKeys } from '../model/piano/IPianoChord';\nimport { SVG_SIZE } from '../components/chords-viewer/ChordViewer';\nimport { ChordBox } from 'vexchords'\n\nconst Serializer = new XMLSerializer();\n\n// Nécessaire pour traduire les accords du json aux noms utilisés dans le json\nconst blackListBlackKeys: blackKeys[] = [\"Db\", \"Eb\", \"Gb\", \"Ab\", \"Bb\"]\nconst corBlackKeysEn: {[key in blackKeys]: blackKeys} = {\n  \"Csharp\": \"Db\", \n  \"Db\": \"Csharp\",\n  \"Dsharp\": \"Eb\", \n  \"Eb\": \"Dsharp\",\n  \"Fsharp\": \"Gb\", \n  \"Gb\": \"Fsharp\",\n  \"Gsharp\": \"Ab\", \n  \"Ab\": \"Gsharp\",\n  \"Asharp\": \"Bb\", \n  \"Bb\": \"Asharp\",\n};\n\ntype svgKey = \"C\"|\"D\"|\"E\"|\"F\"|\"G\"|\"A\"|\"B\"|\"Csharp\"|\"Dsharp\"|\"Fsharp\"|\"Gsharp\"|\"Asharp\";\n\n// Ordre des notes nécessaire pour la selection de l'octave\nconst keyOrder: {[key in svgKey]: number} = {\n  C: 1,\n  \"Csharp\": 2,\n  D: 3,\n  \"Dsharp\": 4,\n  E: 5,\n  F: 6,\n  \"Fsharp\": 7,\n  G: 8,\n  \"Gsharp\": 9,\n  A: 10,\n  \"Asharp\": 11,\n  B: 12\n}\n\n/**\n * Permet de retourner un SVG affichant l'accord `chord`\n * @param chord chord à afficher\n */\nexport function renderPianoSvg(chord: IPianoChord, theme: 'light'|'dark') {\n  const piano = new DOMParser().parseFromString(PianoSVG, 'text/xml');\n  \n  // Mise en place du thème\n  if (theme === 'dark') {\n    let pianoKeys = piano.getElementsByClassName('piano-key');\n    for (let item in pianoKeys) {\n      let pianoKey = pianoKeys[item];\n      if (pianoKey.classList && pianoKey.classList.contains('white-key')) {\n        pianoKey.setAttribute('fill', '#4B4B4B');\n        pianoKey.setAttribute('stroke', '#979797');\n      } else if (pianoKey.classList && pianoKey.classList.contains('black-key')) {\n        pianoKey.setAttribute('fill', '#e5e5e5');\n        pianoKey.setAttribute('stroke', '#555555');\n      }\n      \n    }\n  }\n\n\n  // Initialisation pour la première touche\n  let firstKey = chord.position[0].name;\n  // Si le nom de l'accord ne correspond pas au nom dans le svg on le traduit\n  if (blackListBlackKeys.includes(firstKey as blackKeys)) {\n    firstKey = corBlackKeysEn[firstKey as blackKeys];\n  }\n  // Selection de la touche (la première touche est forcément sur le premier octave)\n  let keyToSelect = \"octave-1-\" + firstKey + \"-key\";\n  if (piano !== null && piano.getElementById(keyToSelect) !== null) {\n    piano.getElementById(keyToSelect)!.setAttribute(\"fill\", \"#ff0000\");\n  }\n  // Variable permettant de gérer les octaves\n  let isOctave2 = false;\n  // Pour toutes les autres touches\n  for (let i = 1; i < chord.position.length; i ++) {\n    let currentKey = chord.position[i].name;\n    // Traduction de la note de la touche\n    if (blackListBlackKeys.includes(currentKey as blackKeys)) {\n      currentKey = corBlackKeysEn[currentKey as blackKeys];\n    }\n    // Si on était sur le premier octave et que la prochaine touche doit être sur le prochain octave\n    if (!isOctave2 && keyOrder[firstKey as svgKey] > keyOrder[currentKey as svgKey]) {\n      // On met à jour la variable d'octave\n      isOctave2 = true;\n    }\n    \n    keyToSelect = isOctave2 ? \"octave-2-\" : \"octave-1-\"\n    keyToSelect += currentKey + \"-key\";\n    // Selection et mise à jour de la couleur de la touche\n    if (piano !== null && piano.getElementById(keyToSelect) !== null) {\n      piano.getElementById(keyToSelect)!.setAttribute(\"fill\", \"#ff0000\");\n    }\n  }\n  // On retourne le svg sur notre element\n  return Serializer.serializeToString(piano);\n}\n\nexport function getGuitarUkuleleSvg(chord, instrumentName: string, theme: 'light' | 'dark') {\n  let chordColor = {\n    defaultColor: '#666', // default color\n    // bgColor: '#FFF', // background color\n    // strokeColor: '#666', // stroke color (overrides defaultColor)\n    // textColor: '#666', // text color (overrides defaultColor)\n    // stringColor: '#666', // string color (overrides defaultColor)\n    // fretColor: '#666', // fret color (overrides defaultColor)\n    // labelColor: '#666', // label color (overrides defaultColor)\n  }\n  if (theme === 'dark') {\n    chordColor.defaultColor = '#ccc'\n  }\n  let selector = document.createElement('svg');\n  let data;\n    if (chord !== undefined && chord.position && chord.position.length > 0) {\n      data = {\n        name: chord.key,\n        chords: chord.position[0].frets.map((fret, index) => fret === -1 ? [index+1, 'x'] : [index+1, fret]),\n        finger: chord.position[0].fingers,\n        baseFret: chord.position[0].baseFret,\n        barres: chord.position[0].barres!.map(barre => barreInterpretor(chord.position[0].frets, barre, instrumentName === 'guitar' ? 6 : 4))\n      }\n      const test = new ChordBox(selector, {\n        numStrings: instrumentName === 'guitar' ? 6 : 4,\n        width: SVG_SIZE.width,\n        height: SVG_SIZE.height,\n        ...chordColor\n      });\n      test.draw({\n        chord: data.chords,\n        position: data.baseFret,\n        barres: data.barres,\n        // tuning: chordsData.tunings.standard\n      })\n    }\n  return selector;\n}\n\nfunction barreInterpretor(frets: number[], barre: number, chordsNumber: number) {\n  let minFret = chordsNumber;\n  let maxFret = 0;\n\n  frets.forEach((fret,index) => {\n    if (fret === barre) {\n      if (index + 1 < minFret) {\n        minFret = index + 1\n      }\n      if (index + 1 > maxFret) {\n        maxFret = index + 1\n      }\n    }\n  })\n  return {fromString: maxFret, toString: minFret, fret: barre}\n}\n\n/*\n\nOn part du principe que :\nQuand on a un barré sur une case :\n - On prend toutes les frettes sur la case et on met le barré de la plus petite à la plus grande\n\n\n*/\n\n\n","import * as React from \"react\";\nimport { NotificationType } from \"../components/MySnackbarContentWrapper\";\n\nconst useNotificationHandler = () => {\n  const [message, setMessage] = React.useState<string | undefined>(undefined);\n  const [timeout, setTimeout] = React.useState(-1);\n  const [type, setType] = React.useState<NotificationType>('info');\n\n  const showNotification = (notificationMessage: string, notificationType: NotificationType = 'info') => {\n    if (timeout !== -1) {\n      clearTimeout(timeout);\n      setTimeout(-1);\n    }\n    setType(notificationType);\n    setMessage(notificationMessage);\n    let timeoutValue = window.setTimeout(() => {\n      setMessage(undefined);\n    }, 3000);\n    setTimeout(timeoutValue);\n  };\n\n  const closeNotification = () => {\n    if (timeout !== -1) {\n      clearTimeout(timeout);\n      setTimeout(-1);\n    }\n    setMessage(undefined);\n  };\n\n  return { notification: { message, type }, showNotification, closeNotification };\n};\n\nexport default useNotificationHandler;","import React from 'react';\nimport { DEFAULT_NOTIFICATION } from '../utils/consts';\nimport { Notification } from '../model/Notification';\nimport { NotificationType } from '../components/MySnackbarContentWrapper';\nimport useNotificationHandler from '../hooks/useNotificationHandler';\n\nexport interface INotificationContextInterface {\n  notification: Notification;\n  showNotification: (notificationMessage: string, notificationType: NotificationType) => void;\n  closeNotification: () => void;\n}\n\nexport const notificationContext =\n  React.createContext<INotificationContextInterface>({\n    notification: DEFAULT_NOTIFICATION,\n    showNotification: () => {},\n    closeNotification: () => {}\n  })\n\nconst { Provider } = notificationContext;\n\nconst NotificationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { notification, showNotification, closeNotification } = useNotificationHandler();\n\n  return (\n    <Provider value={{ notification, showNotification, closeNotification }}>\n      {children}\n    </Provider>\n  );\n\n};\n\nexport default NotificationProvider;\n","import React, { useState, useContext } from 'react';\nimport { MenuItem, Menu, Button } from '@material-ui/core';\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { notificationContext } from '../../contexts/NotificationContext';\n\ntype addToPartitionButtonProps = { userId: string, chordId: string, instrumentId: string };\n\nconst addToPartitionButtonQuery = (userId, instrumentId) => gql`\n{\n  partitionsFromUserForInstrument(userId: \"${userId}\", instrumentId: \"${instrumentId}\") {\n    id\n    name\n    chords {\n      id\n    }\n    instrument {\n      id\n    }\n    owner {\n      id\n    }\n    content\n    visibility\n  }\n}\n`\n\nexport enum Visibility {\n  PUBLIC = 'PUBLIC',\n  PRIVATE = 'PRIVATE'\n}\nexport type PartitionInput = { name: string, chords: string[], ownerId: string, instrumentId: string, content: string, visibility: Visibility };\n\n// const addToPartitionMutation = (partitionId: string, partitionInput: PartitionInput) => gql`\n// {\n//   modifyPartition(id: \"${partitionId}\", partitionInput: \"${partitionInput}\") {\n//     id\n//   }\n// }\n// `\n\nconst MODIFY_PARTITION = gql`\n  mutation ModifyPartition($id: ID!, $partitionInput: PartitionInput!) {\n    modifyPartition(id: $id, partitionInput: $partitionInput) {\n      id\n      name\n      chords {\n        id\n      }\n      instrument {\n        id\n      }\n      content\n    }\n  }\n`;\n\nconst AddToPartitionButton: React.FC<addToPartitionButtonProps> = ({ userId, chordId, instrumentId }) => {\n  const [ anchorEl, setAnchorEl ] = useState(null);\n  const { data, loading, error } = useQuery(addToPartitionButtonQuery(userId, instrumentId));\n  const [ modifyPartition, { loading: mutationLoading, error: mutationError } ] = useMutation(MODIFY_PARTITION);\n  const notificationHandler = useContext(notificationContext);\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  }\n\n  const handleClickPartition = async (partition) => {\n    let partitionChords = partition.chords.map(chord => chord.id);\n    partitionChords.push(chordId);\n    let partitionInput: PartitionInput = {\n      chords: partitionChords,\n      instrumentId: partition.instrument.id,\n      name: partition.name,\n      ownerId: userId,\n      content: partition.content,\n      visibility: partition.visibility\n    }\n    let res;\n    try {\n      res = await modifyPartition({ variables: { id: partition.id, partitionInput } });\n    } catch (err) {\n      console.log('err', err)\n      notificationHandler.showNotification(\"Erreur lors de l'ajout de l'accord\", 'error')\n    }\n    if (res.data !== null) {\n      notificationHandler.showNotification(\"L'accord a bien été ajouté\", 'success')\n    }\n    setAnchorEl(null);\n  }\n\n  return (\n    <div>\n      {loading === true && <div>Loading...</div>}\n      {mutationLoading === true && <div>Ajout de l'accord en cours</div>}\n      {loading === false && error === undefined && mutationLoading === false \n        && mutationError === undefined &&  \n      (\n        <div>\n          <Button onClick={handleClick}>Add to partition</Button>\n          <Menu id=\"simple-menu\" anchorEl={anchorEl} keepMounted open={Boolean(anchorEl)} onClose={handleClose}>\n            {data.partitionsFromUserForInstrument.map(partition => \n              <div key={partition.id}>\n                {partition.chords.findIndex(chord => chord.id === chordId) === -1 &&\n                  <MenuItem onClick={() => handleClickPartition(partition)}>{partition.name}</MenuItem>\n                }\n              </div>\n            )}\n            \n          </Menu>\n        </div>\n      )}\n      {mutationError === undefined && <p>{mutationError}</p>}\n      {error !== undefined && (\n        <div>Error, the backend moved to the dark side.</div>\n      )}\n    </div>\n  )\n}\n\nexport default AddToPartitionButton;","import React, { useContext } from 'react';\nimport { renderPianoSvg, getGuitarUkuleleSvg } from '../../utils/chordViewerUtils';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { useTheme, Grid } from '@material-ui/core';\nimport { authContext } from '../../contexts/AuthContext';\nimport AddToPartitionButton from './AddToPartitionButton';\n\ntype chordViewerProp = {instrumentId: string, instrumentName: string, mainKey: string, suffix: string, isInPartition:boolean }\n\nexport const SVG_SIZE: {width: number, height: number} = { width: 250, height: 400 }\n\nfunction chordQueryBuilder(instrumentId: string, key: string, suffix: string) {\n  return gql`\n  {\n    chordFromName(instrumentId: \"${instrumentId}\", key: \"${key}\",suffix: \"${suffix}\") {\n      id\n      key\n      suffix\n      position\n      info\n    }\n  }\n  `\n}\n\nconst ChordViewer: React.FC<chordViewerProp> = ( { instrumentId, instrumentName, mainKey, suffix, isInPartition } ) => {\n  const theme = useTheme();\n  const { error, data, loading } = useQuery(chordQueryBuilder(instrumentId, mainKey, suffix));\n  // const service = useChordService('ukulele')//instrumentId);\n  const auth = useContext(authContext);\n  let svg = '';\n  let svgGuitar;\n  let svgUkulele;\n  if (loading === false && error === undefined && data.chordFromName) {\n    // Récupérer les données à afficher dans le selector\n    let chord = {\n      id: data.chordFromName.id,\n      info: data.chordFromName.info,\n      key: data.chordFromName.key,\n      position: JSON.parse(data.chordFromName.position),\n      suffix: data.chordFromName.suffix\n    }\n    if (instrumentName === 'piano') {\n      svg = renderPianoSvg(chord, theme.palette.type);\n    } else if(instrumentName === 'guitar') {\n      svgGuitar = getGuitarUkuleleSvg(chord, instrumentName, theme.palette.type);\n    } else if (instrumentName === 'ukulele') {\n      svgUkulele = getGuitarUkuleleSvg(chord, instrumentName, theme.palette.type);\n    }\n  }\n\n  return (\n      <div>\n        {loading === true && <div>Loading...</div>}\n        {loading === false && error === undefined && (\n        <div>\n          {instrumentName === 'piano' && svg !== '' ? \n            <Grid container spacing={0} direction=\"column\" alignItems=\"center\">\n              <Grid item xs={12}>\n                <svg width={SVG_SIZE.height} dangerouslySetInnerHTML={{__html: svg}}></svg>\n              </Grid>\n              {auth.auth.id !== '0' && !isInPartition ? \n                <Grid item xs={12}>\n                  <AddToPartitionButton userId={auth.auth.id} chordId={data.chordFromName.id} instrumentId={instrumentId}></AddToPartitionButton>\n                </Grid>\n                : null\n              }\n            </Grid> : <div></div>\n          }\n          {(instrumentName === 'guitar') && svgGuitar !== undefined ? \n            <Grid container spacing={0} direction=\"column\" alignItems=\"center\">\n              <Grid item xs={12}>\n                <svg width={SVG_SIZE.width} height={SVG_SIZE.height} dangerouslySetInnerHTML={{__html: svgGuitar.outerHTML}}></svg>\n              </Grid>\n              {auth.auth.id !== '0' && !isInPartition ? \n                <Grid item xs={12}>\n                  <AddToPartitionButton userId={auth.auth.id} chordId={data.chordFromName.id} instrumentId={instrumentId}></AddToPartitionButton>\n                </Grid>\n                : null\n              }\n            </Grid> : <div></div>\n          }\n          {(instrumentName === 'ukulele') && svgUkulele !== undefined ? \n            <Grid container spacing={0} direction=\"column\" alignItems=\"center\">\n              <Grid item xs={12}>\n              <svg width={SVG_SIZE.width} height={SVG_SIZE.height} dangerouslySetInnerHTML={{__html: svgUkulele.outerHTML}}></svg>\n              </Grid>\n              {auth.auth.id !== '0' && !isInPartition ? \n                <Grid item xs={12}>\n                  <AddToPartitionButton userId={auth.auth.id} chordId={data.chordFromName.id} instrumentId={instrumentId}></AddToPartitionButton>\n                </Grid>\n                : null\n              }\n            </Grid> : <div></div>\n          }\n        </div>\n        )}\n        {error !== undefined && (\n          <div>Error, the backend moved to the dark side.</div>\n        )}\n      </div>\n    )\n}\n\nexport default ChordViewer;","import { useContext, useEffect } from 'react';\nimport { __RouterContext, RouteComponentProps, StaticContext } from 'react-router';\nimport useForceUpdate from 'use-force-update';\n\nexport function useReactRouter(): RouteComponentProps<{}, StaticContext, any> {\n  const forceUpdate = useForceUpdate();\n  const routerContext = useContext(__RouterContext);\n  useEffect(\n    () => routerContext.history.listen(forceUpdate),\n    // eslint-disable-next-line\n    [ routerContext ]\n  );\n  return routerContext;\n};","import React from 'react';\nimport { createStyles, Theme, FormControl, InputLabel, Select, MenuItem, Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { InstrumentType } from '../../model/InstrumentType';\nimport ChordViewer from '../chords-viewer/ChordViewer';\nimport { RouteComponentProps, StaticContext } from 'react-router';\nimport { CHORD_VIEWER_BASE_ROUTE } from '../../utils/routerUtils';\nimport { useReactRouter } from '../../hooks/useReactRouter';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\n\nexport type TParams = {instrument: string, key: string, suffix: string,}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n  }),\n);\n\ntype chordSelectorProps = {\n  instrumentId: string;\n  instrumentName: InstrumentType;\n  noViewer: boolean\n};\n\nfunction chordForInstrumentQueryBuilder(instrumentId: string) {\n  return gql`\n  {\n    instrument(id: \"${instrumentId}\") {\n      keys\n      suffixes\n    }\n  }\n  `\n}\n\nconst ChordSelector: React.FC<chordSelectorProps> = ({ instrumentId, instrumentName, noViewer }) => {\n  const { error, loading, data } = useQuery(chordForInstrumentQueryBuilder(instrumentId));\n  // const service = useChordService((instrumentId + 'ChordName') as 'guitarChordName' | 'ukuleleChordName' | 'pianoChordName') as Service<IPayloadChordName>;\n  const router = useReactRouter() as RouteComponentProps<TParams, StaticContext, any>;\n  const classes = useStyles();\n\n  let keyParam = router.match.params.key !== undefined ? router.match.params.key : '';\n  let suffixParam = router.match.params.suffix !== undefined ? router.match.params.suffix : '';\n\n  // Add instrument + check si c'est le meme qu'en paramètre\n  const [values, setValues] = React.useState({\n    key: keyParam,\n    suffix: suffixParam,\n  });\n\n  const handleChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n    setValues(oldValues => ({\n      ...oldValues,\n      [event.target.name as string]: event.target.value,\n    }));\n    if (noViewer) return\n    let pathToGo = [\n      CHORD_VIEWER_BASE_ROUTE,\n      instrumentName,\n      event.target.name === 'key' ? event.target.value : values.key,\n      event.target.name === 'suffix' ? event.target.value : values.suffix\n    ];\n    router.history.replace(pathToGo.join('/'));\n  };\n\n  let keys: string[] = [];\n  let suffixes: string[] = [];\n\n  if (loading === false && error === undefined) {\n    keys = data.instrument.keys;\n    suffixes = data.instrument.suffixes;\n  }\n\n  return (\n    <div>\n      {loading === true && <div>Loading...</div>}\n      {loading === false && error === undefined && (\n      <div>\n        <Grid container spacing={0} direction=\"column\" alignItems=\"center\">\n\n          <Grid item xs={12}>\n            <FormControl className={classes.formControl}>\n              <InputLabel htmlFor=\"age-helper\">Main Chord</InputLabel>\n              <Select value={values.key} onChange={handleChange} inputProps={{ name: 'key' }}>\n                {keys.map(key => <MenuItem key={key} value={key}>{key}</MenuItem>)}\n              </Select>\n            </FormControl>\n            <FormControl className={classes.formControl}>\n              <InputLabel htmlFor=\"age-helper\">Suffix</InputLabel>\n              <Select value={values.suffix} onChange={handleChange} inputProps={{ name: 'suffix' }}>\n                {suffixes.map(suffix => <MenuItem key={suffix} value={suffix}>{suffix}</MenuItem>)}\n              </Select>\n            </FormControl>\n          </Grid>\n          {noViewer === false && values.key !== '' && values.suffix !== '' && values.key !== undefined ? \n            <Grid item xs={12}>\n              <ChordViewer isInPartition={false} instrumentId={instrumentId} instrumentName={instrumentName} mainKey={values.key} suffix={values.suffix}></ChordViewer>\n            </Grid> \n            : <div></div>\n          }\n          \n\n        </Grid> \n        \n        \n      </div>\n      )}\n      {error !== undefined && (\n        <div>Error, the backend moved to the dark side: {error}</div>\n      )}\n    </div>\n  )\n}\n\nexport default ChordSelector;","export const BASE_URL = '' // BECAUSE OF GITHUBPAGES\nexport const CHORD_VIEWER_BASE_ROUTE = BASE_URL + \"/chordViewer\";\nexport const PARTITION_LIST_BASE_ROUTE = BASE_URL + \"/partitionList\";\nexport const PARTITION_BASE_ROUTE = BASE_URL + \"/partition\";\nexport const PARTITION_EDITOR_BASE_ROUTE = BASE_URL + \"/partition/editor\";\nexport const NEW_PARTITION_BASE_ROUTE = BASE_URL + \"/newPartition\"","import React from 'react';\nimport { Tab, Tabs, Theme, Box, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\nimport { InstrumentType } from '../../model/InstrumentType';\nimport ChordSelector, { TParams } from './ChordSelector';\nimport { useReactRouter } from '../../hooks/useReactRouter';\nimport { CHORD_VIEWER_BASE_ROUTE } from '../../utils/routerUtils';\nimport { RouteComponentProps, StaticContext } from 'react-router';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      <Box p={3}>{children}</Box>\n    </Typography>\n  );\n}\n\nfunction a11yProps(index: any) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    flexGrow: 1,\n    // backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nconst INSTRUMENT_QUERY = gql`\n  {\n    instruments {\n      id\n      name\n    }\n  }\n`;\n\ntype instrumentSelectorProp = { noViewer: boolean }\n\nconst InstrumentSelector: React.FC<instrumentSelectorProp> = ({ noViewer }) => {\n  const { loading, error, data } = useQuery(INSTRUMENT_QUERY);\n  const { history, match } = useReactRouter() as RouteComponentProps<TParams, StaticContext, any>;\n  const classes = useStyles();\n\n  let instrumentParam: InstrumentType\n  if (match.params.instrument !== undefined && noViewer === false) {\n    instrumentParam = match.params.instrument as InstrumentType;\n  } else if (noViewer === false) {\n    instrumentParam = 'ukulele';\n  }\n\n  const [value, setValue] = React.useState(0);\n  type routeInfoType = {[instrument in InstrumentType]: string};\n  const [routeInfos, setRouteInfos] = React.useState<routeInfoType>({} as routeInfoType);\n  let dataToDisplay: {name: InstrumentType, id: string}[] = [];\n\n  const handleOnChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    let instrumentName = dataToDisplay.map(instrument => instrument.name);\n    setRouteInfos({ ...routeInfos, [instrumentName[value] as InstrumentType]: history.location.pathname });\n    setValue(newValue);\n    if (noViewer) return\n    let newHistory = '';\n    if (routeInfos[instrumentName[newValue]] && routeInfos[instrumentName[newValue]] !== null ) {\n      newHistory = routeInfos[instrumentName[newValue]];\n    }\n    history.replace(newHistory === '' ? CHORD_VIEWER_BASE_ROUTE + '/' + instrumentName[newValue] : newHistory)\n  }\n\n  if (loading === false && error === undefined) {\n    dataToDisplay = data.instruments;\n    if (noViewer === false) {\n      let index = dataToDisplay.findIndex(elem => elem.name === instrumentParam);\n      if (value !== index) setValue(index === -1 ? 0 : index)\n    }\n  }\n\n  return (\n      <div className={classes.root}>\n        {loading === true && <div>Loading...</div>}\n        {loading === false && error === undefined && (\n        <div>\n          <Tabs value={value} onChange={handleOnChange} centered>\n            {dataToDisplay.map((instrument, index) => <Tab key={instrument.id} label={instrument.name} {...a11yProps(index)}></Tab>)}\n          </Tabs>\n          {dataToDisplay.map((instrument, index) => \n            <TabPanel key={instrument.id} index={index} value={value}>\n              <ChordSelector noViewer={noViewer} instrumentId={instrument.id} instrumentName={instrument.name}></ChordSelector>\n            </TabPanel>\n          )}\n        </div>\n        )}\n        {error !== undefined && (\n          <div>Error, the backend moved to the dark side.</div>\n        )}\n      </div>\n    )\n}\n\nexport default InstrumentSelector;","export class FetchError {\n\n  private _code: number;\n  private _message: string;\n\n  constructor(code, message?) {\n    this._message = message;\n    this._code = code;\n  }\n\n  get message() {\n    return this._message;\n  }\n\n  get code() {\n    return this._code;\n  }\n}","import { FetchError } from \"../model/FetchError\";\n\ntype FetchMethods = 'get' | 'post' | 'put' | 'delete';\n\nexport function fetchBuilder(url: URL, method: FetchMethods, headers?: Headers, body?) {\n  let fetchHeaders = new Headers();\n  if (headers) {\n    headers.forEach((value, key) => {\n      fetchHeaders.append(key, value);\n    });\n  }\n  return fetch(url.toString(), {\n    method: method,\n    cache: \"no-cache\",\n    mode: \"cors\",\n    headers: fetchHeaders,\n    body: body,\n    credentials: 'include'\n  });\n}\n\nexport async function fetchHandler(url: URL, method: FetchMethods, headers?: Headers, body?) {\n  let response: Response;\n  try {\n    response = await fetchBuilder(url, method, headers, body);\n    let resJson;\n    try {\n      resJson = await response.json();\n    } catch (err) {\n      if (!response.ok) {\n        throw new FetchError(response.status, response.statusText);\n      } else {\n        return true;\n      }\n    }\n    if (!response.ok) {\n      throw new FetchError(response.status, response.statusText);\n    } else {\n      return resJson;\n    }\n  } catch (err) {\n    throw err;\n  }\n}","import { fetchHandler } from \"../utils/fetchUtils\";\nimport { ENDPOINT } from \"../utils/consts\";\n\nexport async function authenticate(username: string, password: string) {\n  let body = new URLSearchParams([ ['username', username], ['password', password]]);\n  let url = new URL(ENDPOINT + 'auth/login/')\n  let fetchRes = await fetchHandler(url, 'post', undefined, body)\n  return fetchRes;\n}\n\nexport async function register(username: string, password: string) {\n  let body = new URLSearchParams([ ['username', username], ['password', password]]);\n  let url = new URL(ENDPOINT + 'auth/register')\n  let fetchRes = await fetchHandler(url, 'post', undefined, body)\n  return fetchRes;\n}\n\nexport async function isAuth() {\n  let url = new URL(ENDPOINT + 'auth/isauth')\n  let fetchRes = await fetchHandler(url, 'get')\n  return fetchRes;\n}\n\nexport async function logOut() {\n  let url = new URL(ENDPOINT + 'auth/logout')\n  let fetchRes = await fetchHandler(url, 'get')\n  return fetchRes;\n}\n","import React, { useState } from 'react';\nimport { TextField, Button, Grid, Paper } from '@material-ui/core';\nimport { authenticate, register, isAuth, logOut } from '../services/loginService';\nimport { authContext, IAuthContextInterface } from '../contexts/AuthContext';\nimport { UserAuth } from '../model/UserAuth';\nimport { useReactRouter } from '../hooks/useReactRouter';\nimport { notificationContext, INotificationContextInterface } from '../contexts/NotificationContext';\nimport { BASE_URL } from '../utils/routerUtils';\n\nconst ERROR_400_AUTH = 'Requête invalide'\nconst ERROR_401_AUTH = 'Nom de compte ou mot de passe incorrect'\nconst ERROR_403_AUTH = 'Vous êtes déjà connecté'\nconst ERROR_OTHER_AUTH = 'Erreur serveur inconnue'\nconst ERROR_400_REGISTER = 'Requête invalide'\nconst ERROR_401_REGISTER = `Nom d'utilisateur déjà utilisé`\nconst ERROR_403_REGISTER = 'Vous êtes déjà connecté'\nconst ERROR_OTHER_REGISTER = 'Erreur serveur inconnue'\nconst ERROR_OTHER_ISAUTH = 'Erreur serveur inconnue'\nconst ERROR_401_LOGOUT = `Vous n'êtes pas connecté`\nconst ERROR_OTHER_LOGOUT = 'Erreur serveur inconnue'\n\nconst Login: React.FC = () => {\n  const { history } = useReactRouter();\n  const auth = React.useContext(authContext);\n  const [usernameInput, setUsernameInput] = useState('');\n  const [passwordInput, setPasswordInput] = useState('');\n  const notificationHandler = React.useContext(notificationContext);\n\n  const handleLoginButtonClick = async () => {\n    try {\n      let userData = await authenticate(usernameInput, passwordInput);\n      notificationHandler.showNotification('Vous êtes bien authentifié', 'success');\n      const { id, username }: UserAuth = userData;\n      auth.setAuthStatus({ id, username });\n      history.replace(BASE_URL);\n    } catch (err) {\n      if (err.code === 400) {\n        // Requête invalide\n        notificationHandler.showNotification(ERROR_400_AUTH, 'error')\n      } else if (err.code === 401) {\n        // Nom de compte ou mot de pass incorrect\n        notificationHandler.showNotification(ERROR_401_AUTH, 'error')\n      } else if (err.code === 403) {\n        // Vous ếtes déjà connecté\n        notificationHandler.showNotification(ERROR_403_AUTH, 'error')\n      } else {\n        // Erreur serveur inconnue\n        notificationHandler.showNotification(ERROR_OTHER_AUTH, 'error')\n      }\n    }\n  };\n\n  const handleRegisterButtonClick = async () => {\n    try {\n      await register(usernameInput, passwordInput);\n      notificationHandler.showNotification('Vous êtes bien enregistré', 'success');\n    } catch (err) {\n      if (err.code === 400) {\n        // Requête invalide\n        notificationHandler.showNotification(ERROR_400_REGISTER, 'error')\n      } else if (err.code === 401) {\n        // Nom utilisateur déja utilisé\n        notificationHandler.showNotification(ERROR_401_REGISTER, 'error')\n      } else if (err.code === 403) {\n        // Vous ếtes déjà connecté\n        notificationHandler.showNotification(ERROR_403_REGISTER, 'error')\n      } else {\n        // Erreur serveur inconnue\n        notificationHandler.showNotification(ERROR_OTHER_REGISTER, 'error')\n      }\n    }\n  };\n\n  const handleIsAuthButtonClick = async () => {\n    try {\n      let res = await isAuth()\n      notificationHandler.showNotification(`Vous êtes ${res ? 'connecté' : 'déconnecté'}`, 'info');\n    } catch (err) {\n      // erreur serveur inconnu (erreur réseau)\n      notificationHandler.showNotification(ERROR_OTHER_ISAUTH, 'error');\n    }\n  };\n\n  return (\n    <Grid container spacing={0} direction=\"column\" alignItems=\"center\" justify=\"center\" style={{ minHeight: '100vh' }}>\n      <Grid item>\n        <Paper style={{padding: 10}}>\n\n          <Grid container spacing={1} direction=\"column\" alignItems=\"center\">\n            <Grid item xs={12}>\n              <TextField value={usernameInput} onChange={(ev) => setUsernameInput(ev.target.value)} label=\"Nom de compte\"></TextField>\n            </Grid>\n            <Grid item xs={12}>\n              <TextField type=\"password\" value={passwordInput} onChange={(ev) => setPasswordInput(ev.target.value)} label=\"Mot de passe\"></TextField>\n            </Grid>\n            <Grid item xs={12}>\n              <Button onClick={handleLoginButtonClick}>Login</Button>\n              <Button onClick={handleRegisterButtonClick}>Register</Button>\n              <Button onClick={handleIsAuthButtonClick}>Is Authenticated</Button>\n              <Button onClick={() => handleLogOutButtonClick(notificationHandler, auth)}>Logout</Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport const handleLogOutButtonClick = async (notificationHandler: INotificationContextInterface, auth: IAuthContextInterface) => {\n  try {\n    await logOut()\n    notificationHandler.showNotification('Vous êtes bien déconnecté', 'success');\n    auth.setUnauthStatus();\n  } catch (err) {\n    if (err.code === 401) {\n      // Vous n'êtes pas connecté\n      notificationHandler.showNotification(ERROR_401_LOGOUT, 'error')\n    } else {\n      // erreur serveur inconnue\n      notificationHandler.showNotification(ERROR_OTHER_LOGOUT, 'error')\n    }\n  }\n};\n\nexport default Login;","import React from 'react';\nimport { IconButton, SnackbarContent, Theme, makeStyles } from \"@material-ui/core\";\nimport { amber, green } from \"@material-ui/core/colors\";\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport clsx from 'clsx';\n\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon,\n};\n\nexport type NotificationType = keyof typeof variantIcon;\n\nconst useStyles1 = makeStyles((theme: Theme) => ({\n  success: {\n    backgroundColor: green[600],\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark,\n  },\n  info: {\n    backgroundColor: theme.palette.primary.main,\n  },\n  warning: {\n    backgroundColor: amber[700],\n  },\n  icon: {\n    fontSize: 20,\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing(1),\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n}));\n\nexport interface Props {\n  className?: string;\n  message?: string;\n  onClose?: () => void;\n  variant: NotificationType;\n}\n\nfunction MySnackbarContentWrapper(props: Props) {\n  const classes = useStyles1();\n  const { className, message, onClose, variant, ...other } = props;\n  const Icon = variantIcon[variant];\n\n  return (\n    <SnackbarContent\n      className={clsx(classes[variant], className)}\n      aria-describedby=\"client-snackbar\"\n      message={\n        <span id=\"client-snackbar\" className={classes.message}>\n          <Icon className={clsx(classes.icon, classes.iconVariant)} />\n          {message}\n        </span>\n      }\n      action={[\n        <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\n          <CloseIcon className={classes.icon} />\n        </IconButton>,\n      ]}\n      {...other}\n    />\n  );\n}\n\nexport default MySnackbarContentWrapper","import React, { useContext } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Fab, Theme, Card, CardActionArea, CardContent, Typography, Grid } from '@material-ui/core';\nimport { makeStyles, createStyles } from '@material-ui/styles';\nimport AddIcon from '@material-ui/icons/Add';\nimport { PARTITION_EDITOR_BASE_ROUTE, PARTITION_BASE_ROUTE } from '../../utils/routerUtils';\nimport { Link } from 'react-router-dom';\nimport { useReactRouter } from '../../hooks/useReactRouter';\nimport Partition from '../../model/Partition';\nimport { authContext } from '../../contexts/AuthContext';\n\nconst PARTITIONS_QUERY = gql`\n  {\n    partitions {\n      id\n      name\n      owner {\n        id\n        username\n      }\n      instrument {\n        id\n        name\n      }\n    }\n  }\n`\n\ntype queryPartition = { partitions: Partition[] }\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    fab: {\n      position: 'absolute',\n      bottom: theme.spacing(2),\n      right: theme.spacing(2),\n\n    },\n    card: {\n      maxWidth: 345,\n    }\n  }),\n);\n\nexport const PartitionList: React.FC = () => {\n  const { data, error, loading } = useQuery<queryPartition>(PARTITIONS_QUERY, {fetchPolicy: 'cache-and-network'});\n  const classes = useStyles();\n  const { history } = useReactRouter();\n  const auth = useContext(authContext);\n\n\n  const handleClickPartition = (partitionId: string) => {\n    history.replace(PARTITION_BASE_ROUTE + '/' + partitionId);\n  }\n\n  if (error !== undefined) {\n    console.log('PartitionList error', error);\n  }\n\n  return (\n    <div>\n      {loading === true && <div>Loading...</div>}\n      {loading === false && error === undefined && data !== undefined && (\n      <div>\n        <Grid container spacing={1} style={{ padding: 10 }}>\n          {data.partitions.map(partition => <Grid key={partition.id} item onClick={() => handleClickPartition(partition.id)}>{getCardFromPartition(partition)}</Grid>)}\n        </Grid>\n        {auth.auth.id !== '0' &&\n          <Fab component={Link} to={PARTITION_EDITOR_BASE_ROUTE + '/new'} color='secondary' className={classes.fab}><AddIcon/></Fab>\n        }\n      </div>\n      )}\n      {error !== undefined && (\n        <div>Error, the backend moved to the dark side.</div>\n      )}\n    </div>\n  )\n}\n\nfunction getCardFromPartition(partition: Partition) {\n  return (\n    <Card style={{ maxWidth: 345 }}>\n      <CardActionArea>\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {partition.name}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            {partition.instrument ? partition.instrument.name : \"Partition vide\"}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            Créée par : {partition.owner.username}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  )\n}","import React, { useContext, useState } from 'react';\nimport { authContext } from '../../contexts/AuthContext';\nimport { Grid, TextField, Button, Paper, FormControl, createStyles, Theme, MenuItem, InputLabel, Select } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { PartitionInput, Visibility } from '../chords-viewer/AddToPartitionButton';\nimport { notificationContext } from '../../contexts/NotificationContext';\nimport { useReactRouter } from '../../hooks/useReactRouter';\nimport { PARTITION_LIST_BASE_ROUTE } from '../../utils/routerUtils';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n  }),\n);\n\nconst INSTRUMENT_LIST_QUERY = gql`\n{\n  instruments {\n    id\n    name\n  }\n}\n`\n\nconst NEW_PARTITION_MUTATION = gql`\n  mutation CreatePartition($partitionInput: PartitionInput) {\n    createPartition (partitionInput: $partitionInput) {\n      id\n    }\n  }\n`\n\nexport const NewPartitionEditor: React.FC = () => {\n  const auth = useContext(authContext);\n  const notificationHandler = useContext(notificationContext);\n  const { history } = useReactRouter();\n  const [partitionName, setPartitionName] = useState('');\n  const [inputError, setInputError] = useState(false);\n  const [instrumentSelected, setInstrumentSelected] = useState('');\n  const [selectInstrumentError, setSelectInstrumentError] = useState(false);\n  const [selectVisibilityError, setSelectVisibilityError] = useState(false);\n  const [visibilitySelected, setVisibilitySelected] = useState<Visibility>(Visibility.PUBLIC);\n  const classes = useStyles();\n  const { data, loading, error } = useQuery(INSTRUMENT_LIST_QUERY);\n  const [ createPartition ] = useMutation(NEW_PARTITION_MUTATION);\n\n  const handleInput = (ev) => {\n    if (ev.target.value === '' ) {\n      setInputError(true);\n    } else {\n      setInputError(false);\n    }\n    setPartitionName(ev.target.value)\n  }\n\n  const handleSelectChange = (ev) => {\n    if (selectInstrumentError) setSelectInstrumentError(false);\n    setInstrumentSelected(ev.target.value)\n  }\n\n  const handleSelectVisibilityChange = (ev) => {\n    if (selectVisibilityError) setSelectVisibilityError(false);\n    setVisibilitySelected(ev.target.value)\n  }\n\n  const handleCreatePartitionClick = async () => {\n    if (auth.auth.id !== '0' && partitionName !== '' && instrumentSelected !== '') {\n      let partitionInput: PartitionInput = {\n        chords: [],\n        instrumentId: instrumentSelected,\n        name: partitionName,\n        ownerId: auth.auth.id,\n        content: '',\n        visibility: visibilitySelected\n     }\n     let res;\n     try {\n       res = await createPartition({ variables: { partitionInput }})\n     } catch (err) {\n       console.log(err);\n       // Notification\n       notificationHandler.showNotification('Erreur lors de la création de la partition', 'error')\n     }\n     if (res.data.createPartition.id) {\n       // Redirection + Notification\n       history.replace(PARTITION_LIST_BASE_ROUTE);\n       notificationHandler.showNotification('Partition créée', 'success')\n     }\n    } else {\n      // Notification / Input en rouge\n      if (instrumentSelected === '') {\n        setSelectInstrumentError(true);\n      }\n      if (partitionName === '') {\n        setInputError(true);\n      }\n      notificationHandler.showNotification('Veuillez renseigner les champs de création de partition', 'warning');\n    }\n  }\n  \n  return (\n    <div>\n      {auth.auth.id === '0' && \n        <div>\n          Veuillez vous authentifier ou vous créer un compte pour créer une partition\n        </div>\n      }\n      {auth.auth.id !== '0' && loading === false && error === undefined &&\n        <Grid container spacing={0} direction=\"column\" alignItems=\"center\" justify=\"center\" style={{ minHeight: '100vh' }}>\n          <Grid item>\n            <Paper style={{padding: 10}}>\n    \n              <Grid container spacing={1} direction=\"column\" alignItems=\"center\">\n                <Grid item xs={12}>\n                  <TextField error={inputError} value={partitionName} onChange={handleInput} label=\"Nom de partition\"></TextField>\n                </Grid>\n                <FormControl className={classes.formControl}>\n                  <InputLabel>Instrument</InputLabel>\n                  <Select error={selectInstrumentError} value={instrumentSelected} onChange={(ev) => handleSelectChange(ev)}>\n                    {data.instruments.map(instrument => <MenuItem key={instrument.id} value={instrument.id}>{instrument.name}</MenuItem>)}\n                  </Select>\n                </FormControl>\n                <FormControl className={classes.formControl}>\n                  <InputLabel>Visibilité</InputLabel>\n                  <Select error={selectVisibilityError} value={visibilitySelected} onChange={(ev) => handleSelectVisibilityChange(ev)}>\n                    <MenuItem key={Visibility.PUBLIC} value={Visibility.PUBLIC}>{Visibility.PUBLIC}</MenuItem>\n                    <MenuItem key={Visibility.PRIVATE} value={Visibility.PRIVATE}>{Visibility.PRIVATE}</MenuItem>\n                  </Select>\n                </FormControl>\n\n\n                <Grid item xs={12}>\n                  <Button onClick={() => handleCreatePartitionClick()}>Créer la partition</Button>\n                </Grid>\n              </Grid>\n            </Paper>\n          </Grid>\n        </Grid>\n      }\n      {auth.auth.id !== '0' && loading === true &&\n        <div>Loading...</div>\n      }\n      {auth.auth.id !== '0' && error !== undefined &&\n        <div>error</div>\n      }\n    </div>\n    \n  )\n}","import React from 'react';\nimport { withStyles, Theme, Tooltip, Typography } from '@material-ui/core';\nimport ChordViewer from './chords-viewer/ChordViewer';\n\nconst NoBackgroundTooltip = withStyles((theme: Theme) => ({\n  tooltip: {\n    backgroundColor: 'rgba(0, 0, 0, 0)',\n  },\n}))(Tooltip);\n\ntype TooltipChordProps = { chordKey: string, chordSuffix: string, instrumentId: string, instrumentName: string }\n\nconst TooltipChord: React.FC<TooltipChordProps> = ({ chordKey, chordSuffix, instrumentId, instrumentName }) => {\n  return (\n  <NoBackgroundTooltip disableFocusListener disableTouchListener placement=\"right-start\" style={{ display: \"inline\" }}\n    title={\n      <ChordViewer isInPartition={true}\n        instrumentId={instrumentId} instrumentName={instrumentName} mainKey={chordKey} suffix={chordSuffix}\n      ></ChordViewer>\n    }\n  >\n    <Typography variant=\"inherit\" display=\"inline\" style={{ fontWeight: \"bold\", display: 'inline' }}>{chordKey + chordSuffix}</Typography>\n  </NoBackgroundTooltip>\n  )\n}\n\nexport default TooltipChord;\n","import React, { useContext } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { useReactRouter } from '../../hooks/useReactRouter';\nimport { StaticContext, RouteComponentProps } from 'react-router';\nimport { Theme, Fab, createStyles, Typography, Grid } from '@material-ui/core';\nimport { authContext } from '../../contexts/AuthContext';\nimport { PARTITION_EDITOR_BASE_ROUTE } from '../../utils/routerUtils';\nimport { makeStyles } from '@material-ui/styles';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { Link } from 'react-router-dom';\nimport Marked from 'marked';\nimport Markdown from 'markdown-to-jsx';\nimport TooltipChord from '../TooltipChord';\n\n\nfunction partitionQueryGetter(partitionId: string) {\n  return gql`\n    {\n      partition(id: \"${partitionId}\") {\n        id\n        name\n        creationDate\n        updatedAt\n        visibility\n        content\n        chords {\n          id\n          key\n          suffix\n          position\n        }\n        owner {\n          id\n          username\n        }\n        instrument {\n          id\n          name\n        }\n      }\n    }\n  `\n}\n\ntype TParams = { partitionId: string }\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    fab: {\n      position: 'absolute',\n      bottom: theme.spacing(2),\n      right: theme.spacing(2),\n\n    }\n  }),\n);\n\nconst PartitionViewer: React.FC = () => {\n  const { match } = useReactRouter() as RouteComponentProps<TParams, StaticContext, any>\n  const { data, loading, error } = useQuery(partitionQueryGetter(match.params.partitionId));\n  const auth = useContext(authContext);\n  const classes = useStyles();\n\n  if (loading === false && error === undefined) {\n    // displayContent(data.partition.content, data.partition.chords, data.partition.instrument.id, data.partition.instrument.name);\n  }\n  \n  return (\n    <div>\n      {loading === true && <div>Loading...</div>}\n      {loading === false && error === undefined && data !== undefined && (\n      <Grid container direction=\"column\" alignItems=\"center\" style={{ padding: 15 }} spacing={1}>\n        <Grid item>\n          <Typography variant=\"h3\" gutterBottom>{data.partition.name}</Typography>\n            {data.partition.chords.map((chord, pos) => \n              <span key={chord.id}>\n                <TooltipChord \n                  instrumentName={data.partition.instrument.name} \n                  instrumentId={data.partition.instrument.id} \n                  chordKey={chord.key} chordSuffix={chord.suffix}\n                />\n                {data.partition.chords.length - 1 > pos && <span> - </span>}\n              </span>\n            )}\n          </Grid>\n          <Grid item>\n          <Markdown\n            children={getJsxFromContentWithTooltip(Marked(data.partition.content), data.partition.chords, data.partition.instrument.id, data.partition.instrument.name)}\n            options={{\n              overrides: {\n                TooltipChord\n              }\n            }}\n          />\n        </Grid>\n        {auth.auth.id !== '0' && auth.auth.id === data.partition.owner.id &&\n          <Fab component={Link} to={PARTITION_EDITOR_BASE_ROUTE + '/' + data.partition.id} color='secondary' className={classes.fab}><EditIcon/></Fab>\n        }\n      </Grid>\n      )}\n      {error !== undefined && (\n        <div>Error, the backend moved to the dark side.</div>\n      )}\n    </div>\n  )\n}\n\n// TODO: Faire la transformation en Markdown coté serveur\n\nfunction getJsxFromContentWithTooltip(content: string, chordList: {id: string, key: string, suffix: string}[], instrumentId: string, instrumentName: string) {\n  let contentList = [content]\n  chordList.forEach(chord => contentList = occurencesSplitter(contentList, chord.key + chord.suffix));\n  let finalContentList: any[] = [];\n  contentList.forEach((contentElem, pos) => {\n    let chord = chordList.find(chord => (chord.key + chord.suffix) === contentElem);\n    if (chord !== undefined) {\n      finalContentList.push(\n        `<TooltipChord instrumentName=\"${instrumentName}\" instrumentId=\"${instrumentId}\" chordKey=\"${chord.key}\" chordSuffix=\"${chord.suffix}\"/>`\n      )\n    } else {\n      finalContentList.push(contentElem);\n    }\n  })\n  return finalContentList.join('');\n}\n\nfunction occurencesSplitter(contentList: string[], elementToFind: string) {\n  let newContentList: string[] = [];\n  contentList.forEach((content: string) => {\n    let splittedContent = content.split(elementToFind);\n    let filledSplittedContent: string[] = [];\n    for (let i = 0; i < splittedContent.length; i++) {\n      filledSplittedContent.push(splittedContent[i]);\n      if (i !== splittedContent.length -1) filledSplittedContent.push(elementToFind);\n    }\n    newContentList = [...newContentList, ...filledSplittedContent];\n  });\n  return newContentList;\n}\n\nexport default PartitionViewer;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\n\ntype ResponsiveDialogProps = {\n  open: boolean,\n  title: string,\n  content: string,\n  buttonAccept: string,\n  buttonRefuse: string,\n  handleAccept: () => void,\n  handleRefuse: () => void,\n  handleClose: () => void\n}\n\nconst ResponsiveDialog: React.FC<ResponsiveDialogProps> = ({ open, title, content, buttonAccept, buttonRefuse, handleAccept, handleRefuse, handleClose }) => {\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  return (\n    <div>\n      <Dialog\n        fullScreen={fullScreen}\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">{title}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            {content}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleRefuse} color=\"primary\">\n            {buttonRefuse}\n          </Button>\n          <Button onClick={handleAccept} color=\"primary\" autoFocus>\n            {buttonAccept}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default ResponsiveDialog;","import React, { useState, useEffect, useContext } from 'react';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { useReactRouter } from '../../hooks/useReactRouter';\nimport { RouteComponentProps, StaticContext } from 'react-router';\nimport { TextField, Button, IconButton, Grid, Typography, ListItem, ListItemText, ListItemSecondaryAction, List, Theme, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { PartitionInput, Visibility } from '../chords-viewer/AddToPartitionButton';\nimport { notificationContext } from '../../contexts/NotificationContext';\nimport { authContext } from '../../contexts/AuthContext';\nimport SettingsBackupRestoreIcon from '@material-ui/icons/SettingsBackupRestore';\nimport { PARTITION_BASE_ROUTE, PARTITION_LIST_BASE_ROUTE } from '../../utils/routerUtils';\nimport { ControlledEditor } from \"@monaco-editor/react\";\nimport { makeStyles } from '@material-ui/styles';\nimport { green, amber, red } from '@material-ui/core/colors';\nimport ResponsiveDialog from '../ResponsiveDialog';\n\nconst useStyles1 = makeStyles((theme: Theme) => ({\n  success: {\n    backgroundColor: green[600],\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark,\n  },\n  info: {\n    backgroundColor: theme.palette.primary.main,\n  },\n  warning: {\n    backgroundColor: amber[700],\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n}))\n\nconst PARTITION_EDITOR_QUERY = (partitionId: string) =>  gql`\n{\n  partition(id: \"${partitionId}\") {\n    id\n    name\n    visibility\n    owner {\n      id\n      username\n    }\n    content\n    chords {\n      id\n      key\n      suffix\n    }\n    instrument {\n      id\n      name\n    }\n  }\n}\n`\n\nconst MODIFY_PARTITION = gql`\n  mutation ModifyPartition($id: ID!, $partitionInput: PartitionInput!) {\n    modifyPartition(id: $id, partitionInput: $partitionInput) {\n      id\n      name\n      chords {\n        id\n      }\n      instrument {\n        id\n      }\n      content\n    }\n  }\n`;\n\nconst DELETE_PARTITION = gql`\n mutation DeletePartition($id: ID!) {\n   deletePartition(id: $id)\n }\n`\n\ntype TParams = { partitionId: string }\n\nconst PartitionEditor: React.FC = () => {\n  const { match, history } = useReactRouter() as RouteComponentProps<TParams, StaticContext, any>;\n  const {loading, data, error} = useQuery(PARTITION_EDITOR_QUERY(match.params.partitionId));\n  const [partitionName, setPartitionName] = useState('');\n  const [inputError, setInputError] = useState(false);\n  const [partitionContent, setPartitionContent] = useState('');\n  const [ toDeleteChord, setToDeleteChord ] = useState<string[]>([]);\n  const [ modifyPartition] = useMutation(MODIFY_PARTITION);\n  const [ deletePartition] = useMutation(DELETE_PARTITION);\n  const [visibilitySelected, setVisibilitySelected] = useState<Visibility>(Visibility.PUBLIC);\n  const notificationHandler = useContext(notificationContext);\n  const auth = useContext(authContext);\n  const [openDialog, setOpenDialog] = useState(false);\n  const classes = useStyles1();\n\n\n\n  const handleInput = (ev) => {\n    if (ev.target.value === '' ) {\n      setInputError(true);\n    } else {\n      setInputError(false);\n    }\n    setPartitionName(ev.target.value)\n  }\n\n  useEffect(() => {\n    if (data === undefined) return\n    setPartitionName(data.partition.name);\n    setPartitionContent(data.partition.content);\n    setVisibilitySelected(data.partition.visibility);\n  }, [data])\n\n  const handleContentChange = (ev, value) => {\n    setPartitionContent(value);\n  }\n\n  const handleClickButton = async () => {\n    let newChords = data.partition.chords.filter(chord => {\n      return !toDeleteChord.includes(chord.id)\n    })\n    let partitionInput: PartitionInput = {\n      chords: newChords.map(chord => chord.id),\n      content: partitionContent,\n      instrumentId: data.partition.instrument.id,\n      name: partitionName,\n      ownerId: data.partition.owner.id,\n      visibility: visibilitySelected\n    }\n    let res;\n    try {\n      res = await modifyPartition({ variables: {id: match.params.partitionId, partitionInput }});\n      if (res.data !== null) {\n        notificationHandler.showNotification(\"La partition a bien été modifié\", 'success');\n        history.replace(PARTITION_BASE_ROUTE + '/' + data.partition.id);\n      }\n    } catch (err) {\n      console.log('err', err)\n      notificationHandler.showNotification(\"Erreur lors de la modification de la partition\", 'error')\n    }\n\n  }\n\n  const handleClickDelete = (chordId: string) => {\n    let index = toDeleteChord.findIndex(id => id === chordId);\n    if (index === -1) {\n      setToDeleteChord([...toDeleteChord, chordId]);\n    }\n  }\n\n  const handleClickRestore = (chordId: string) => {\n    setToDeleteChord(toDeleteChord.filter(id => id !== chordId));\n  }\n\n  const handleClickButtonDelete = () => {\n    setOpenDialog(true);\n  }\n\n  const handleSelectVisibilityChange = (ev) => {\n    setVisibilitySelected(ev.target.value)\n  }\n\n\n  const handleAcceptDelete = async () => {\n    let res;\n    try {\n      res = await deletePartition({ variables: {id: match.params.partitionId }});\n      if (res.data !== null) {\n        notificationHandler.showNotification(\"La partition a bien supprimée\", 'success');\n        history.replace(PARTITION_LIST_BASE_ROUTE);\n      }\n    } catch (err) {\n      console.log('err', err)\n      notificationHandler.showNotification(\"Erreur lors de la modification de la partition\", 'error')\n    }\n  }\n\n  const closeDialog = () => {\n    setOpenDialog(false);\n  }\n\n  \n\n  return (\n    <div>\n        {auth.auth.id === '0' && \n          <div>\n            Veuillez vous authentifier ou vous créer un compte pour modifier une partition\n          </div>\n        }\n        {auth.auth.id !== '0' &&loading === true && <div>Loading...</div>}\n        {auth.auth.id !== '0' && loading === false && error === undefined && auth.auth.id === data.partition.owner.id && (\n          <Grid container direction=\"column\" alignItems=\"center\" style={{ padding: 15 }} spacing={1}>\n            <Grid item>\n              <TextField error={inputError} defaultValue={data.partition.name} onChange={handleInput} label=\"Nom de partition\"></TextField>\n            </Grid>\n            <Grid item>\n              <Typography variant=\"caption\" style={{ fontStyle: 'italic' }}>\n                Pour ajouter des accords à la partition, allez dans l'onglet {data.partition.instrument.name} de la page 'chord' puis cliquez sur le bouton 'Add To partition'\n              </Typography>\n            </Grid>\n            <Grid item>\n              <List>\n                {data.partition.chords.map(chord => \n                  <div key={chord.id}>\n                    <ListItem>\n                      <ListItemText primaryTypographyProps={toDeleteChord.findIndex(id => id === chord.id) !== -1 ? { style: {textDecoration: \"line-through\"} } : {}}\n                        primary={chord.key + chord.suffix}\n                      />\n                      <ListItemSecondaryAction>\n                        {toDeleteChord.findIndex(id => id === chord.id) !== -1 ? \n                          <IconButton onClick={() => handleClickRestore(chord.id)} edge=\"end\" aria-label=\"delete\">\n                            <SettingsBackupRestoreIcon fontSize=\"small\" />\n                          </IconButton>\n                          :\n                          <IconButton onClick={() => handleClickDelete(chord.id)} edge=\"end\" aria-label=\"delete\">\n                            <ClearIcon fontSize=\"small\" />\n                          </IconButton>\n                        }\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                  </div>\n                )}\n              </List>\n            </Grid>\n            <Grid item>\n              <Typography variant=\"caption\" style={{ fontStyle: 'italic' }}>\n                Cet éditeur support le <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://fr.wikipedia.org/wiki/Markdown\">Markdown</a>\n              </Typography>\n            </Grid>\n            <Grid item>\n              <ControlledEditor\n                language=\"markdown\"\n                theme=\"light\"\n                value={partitionContent}\n                options={{ selectOnLineNumbers: true }}\n                height=\"40vh\"\n                width=\"50vw\"\n                onChange={handleContentChange}\n              />\n            </Grid>\n            <Grid item>\n              <FormControl className={classes.formControl}>\n                <InputLabel>Visibilité</InputLabel>\n                <Select value={visibilitySelected} onChange={(ev) => handleSelectVisibilityChange(ev)}>\n                  <MenuItem key={Visibility.PUBLIC} value={Visibility.PUBLIC}>{Visibility.PUBLIC}</MenuItem>\n                  <MenuItem key={Visibility.PRIVATE} value={Visibility.PRIVATE}>{Visibility.PRIVATE}</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item>\n              <Button variant=\"outlined\" onClick={() => handleClickButton()}>Enregister les modifications</Button>\n            </Grid>\n            <Grid item>\n              <Button style={{ backgroundColor: red[500] }} onClick={() => handleClickButtonDelete()}>Supprimer la partition</Button>\n            </Grid>\n            <ResponsiveDialog\n              open={openDialog}\n              title=\"Suppression de la partition\"\n              content=\"Confirmez vous la suppression de la partition ?\"\n              buttonAccept=\"Oui\"\n              buttonRefuse= \"Non\"\n              handleAccept={handleAcceptDelete}\n              handleRefuse={closeDialog}\n              handleClose={closeDialog}\n            />\n          </Grid>\n        )}\n        {auth.auth.id !== '0' && loading === false && error === undefined && auth.auth.id !== data.partition.owner.id && \n          <div>\n            Vous devez être propriétaire de la partition pour pouvoir la modifier\n          </div>\n        }\n        {auth.auth.id === '0' && error !== undefined && (\n          <div>Error, the backend moved to the dark side.</div>\n        )}\n      </div>\n  )\n}\n\nexport default PartitionEditor;","import React, { SyntheticEvent, useState } from 'react';\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\"\nimport { CHORD_VIEWER_BASE_ROUTE, PARTITION_LIST_BASE_ROUTE, PARTITION_EDITOR_BASE_ROUTE, PARTITION_BASE_ROUTE } from '../utils/routerUtils';\nimport InstrumentSelector from './selector/InstrumentSelector';\nimport { AppBar, Toolbar, IconButton, Typography, Button, makeStyles, Theme, createStyles, ButtonGroup, Snackbar, Drawer, ListItem, List, ListItemIcon, ListItemText } from '@material-ui/core';\nimport Login, { handleLogOutButtonClick } from './Login';\nimport { authContext } from '../contexts/AuthContext';\nimport MySnackbarContentWrapper from './MySnackbarContentWrapper';\nimport { notificationContext } from '../contexts/NotificationContext';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport InvertColorsIcon from '@material-ui/icons/InvertColors';\nimport { PartitionList } from './partitions/PartitionList';\nimport { NewPartitionEditor } from './partitions/NewPartitionEditor';\nimport PartitionViewer from './partitions/PartitionViewer';\nimport PartitionEditor from './partitions/PartitionEditor';\n\n// Use context https://medium.com/hackernoon/learn-react-hooks-by-building-an-auth-based-to-do-app-c2d143928b0b\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    margin: {\n      margin: theme.spacing(1),\n    },\n    list: {\n      width: 250,\n    },\n    fullList: {\n      width: 'auto',\n    },\n  }),\n);\n\ntype mainComponentProps = {onToggleDark}\n\nconst MainComponent: React.FC<mainComponentProps> = ({ onToggleDark }) => {\n  const classes = useStyles();\n  const auth = React.useContext(authContext);\n  const notificationHandler = React.useContext(notificationContext);\n  const [drawer, setDrawer] = useState(false);\n  \n  const handleClose = (event?: SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    notificationHandler.closeNotification();\n  };\n\n  const toggleDrawer = (open: boolean) => (\n    event: React.KeyboardEvent | React.MouseEvent,\n  ) => {\n    if (\n      event.type === 'keydown' &&\n      ((event as React.KeyboardEvent).key === 'Tab' ||\n        (event as React.KeyboardEvent).key === 'Shift')\n    ) {\n      return;\n    }\n\n    setDrawer(open);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        open={notificationHandler.notification.message !== undefined}\n        autoHideDuration={6000}\n        onClose={handleClose}\n      >\n        <MySnackbarContentWrapper\n          onClose={handleClose}\n          variant={notificationHandler.notification.type}\n          message={notificationHandler.notification.message}\n        />\n      </Snackbar>\n\n      <Router>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={toggleDrawer(true)}>\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              Chords\n            </Typography>\n            <ButtonGroup aria-label=\"outlined button group\">\n              <Button component={Link} to={CHORD_VIEWER_BASE_ROUTE} color=\"inherit\">Chord</Button>\n              <Button component={Link} to={PARTITION_LIST_BASE_ROUTE} color=\"inherit\">Partitions</Button>\n              {auth.auth.id === '0' ? \n                <Button component={Link} to='/login' color=\"inherit\">Login</Button>\n                :\n                <Button onClick={async () => await handleLogOutButtonClick(notificationHandler, auth)} color=\"inherit\">Logout</Button>\n              }\n            </ButtonGroup>\n          </Toolbar>\n        </AppBar>\n        <Drawer open={drawer} onClose={toggleDrawer(false)}>\n          <div\n            className={classes.list}\n            role=\"presentation\"\n            onClick={toggleDrawer(false)}\n            onKeyDown={toggleDrawer(false)}\n          >\n            <List>\n              <ListItem button key='theme' onClick={onToggleDark}>\n                <ListItemIcon><InvertColorsIcon/></ListItemIcon>\n                <ListItemText primary='Dark/Light' />\n              </ListItem>\n            </List>\n          </div>\n        </Drawer>\n        \n        <Route path={CHORD_VIEWER_BASE_ROUTE + \"/:instrument?/:key?/:suffix?\"} render={() => <InstrumentSelector noViewer={false}></InstrumentSelector>}/>\n        <Route exact path={PARTITION_LIST_BASE_ROUTE} component={PartitionList}/>\n        <Route exact path={PARTITION_EDITOR_BASE_ROUTE + '/new'} component={NewPartitionEditor}/>\n        <Route exact path={PARTITION_EDITOR_BASE_ROUTE + '/:partitionId'} component={PartitionEditor}/>\n        <Route exact path={PARTITION_BASE_ROUTE + '/:partitionId'} component={PartitionViewer}/>\n        <Route path={'/login'} component={Login}/>\n      </Router>\n    </div>\n\n  )\n}\n\nexport default MainComponent;\n","import React, { useState } from 'react';\nimport './App.css';\nimport 'typeface-roboto';\nimport AuthProvider from './contexts/AuthContext';\nimport MainComponent from './components/MainComponents';\nimport NotificationProvider from './contexts/NotificationContext';\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport ApolloClient from 'apollo-boost';\nimport { ENDPOINT } from './utils/consts';\nimport { createMuiTheme, MuiThemeProvider, CssBaseline } from '@material-ui/core';\n\nexport const client  = new ApolloClient({\n  uri: ENDPOINT + 'graphql',\n  credentials: 'include'\n})\n\n\n\n// Use context https://medium.com/hackernoon/learn-react-hooks-by-building-an-auth-based-to-do-app-c2d143928b0b\n\nconst App: React.FC = () => {\n\n  let localStorageTheme = window.localStorage.getItem('theme');\n  let defaultTheme = localStorageTheme !== null ?\n    JSON.parse(localStorageTheme)\n    :\n    {\n      palette: {\n        type: 'light',\n      }\n    };\n\n  const [theme, setTheme] = useState<{palette: {type: \"light\" | \"dark\" | undefined}}>(defaultTheme);\n\n\n\n  const toggleDarkTheme = () => {\n    setTheme({\n      palette: {\n        type: (theme.palette.type === 'light' ? 'dark' : 'light'),\n      }\n    })\n    window.localStorage.setItem(\"theme\", JSON.stringify({\n      palette: {\n        type: (theme.palette.type === 'light' ? 'dark' : 'light'),\n      }\n    }));\n  }\n\n  const muiTheme = createMuiTheme(theme);\n\n  return (\n    <ApolloProvider client={client}>\n      <AuthProvider>\n        <NotificationProvider>\n          <MuiThemeProvider theme={muiTheme}>\n            <CssBaseline />\n            <MainComponent onToggleDark={toggleDarkTheme}></MainComponent>\n          </MuiThemeProvider>\n        </NotificationProvider>\n      </AuthProvider>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}