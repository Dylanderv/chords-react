import React from 'react';
import useChordService from '../../hooks/useChordService';
import { Tab, Tabs, Theme, Typography, Box } from '@material-ui/core';
import { makeStyles } from '@material-ui/styles';
import { InstrumentType } from '../../model/InstrumentType';
import { IUkuleleChords } from '../../model/ukulele/IUkuleleChords';
import { IGuitarChords } from '../../model/guitar/IGuitarChords';
import { IPianoChords } from '../../model/piano/IPianoChords';

interface TabPanelProps {
  children?: React.ReactNode;
  index: any;
  value: any;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <Typography
      component="div"
      role="tabpanel"
      hidden={value !== index}
      id={`scrollable-auto-tabpanel-${index}`}
      aria-labelledby={`scrollable-auto-tab-${index}`}
      {...other}
    >
      <Box p={3}>{children}</Box>
    </Typography>
  );
}

function a11yProps(index: any) {
  return {
    id: `scrollable-auto-tab-${index}`,
    'aria-controls': `scrollable-auto-tabpanel-${index}`,
  };
}

const useStyles = makeStyles((theme: Theme) => ({
  root: {
    flexGrow: 1,
    width: '100%',
    // backgroundColor: theme.palette.background.paper,
  },
}));

type mainChordSelectorProps = {
  instrument: InstrumentType,
  mainChord: string
}

const SuffixSelector: React.FC<mainChordSelectorProps> = ({ instrument, mainChord }) => {
  const service = useChordService(instrument)
  const classes = useStyles();

  const [value, setValue] = React.useState(0);

  const handleOnChange = (event: React.ChangeEvent<{}>, newValue: number) => {
    setValue(newValue);
  }

  let dataToDisplay: string[] = [];
  if (service.status === 'loaded') {
    if (instrument === "piano") {
      dataToDisplay = (service.payload.data as IPianoChords).pianoChords.filter(filterElem => filterElem.type === mainChord)[0].chords.map(mapElem => mapElem.name);
    } else {
      dataToDisplay = (service.payload.data as IUkuleleChords|IGuitarChords).suffixes;
    }
  }

  return (
      <div className={classes.root}>
        {service.status === 'loading' && <div>Loading...</div>}
        {service.status === 'loaded' && (
        <div>
          <Tabs value={value} onChange={handleOnChange} variant="scrollable" scrollButtons="auto">
            {dataToDisplay.map((elem, index) => <Tab key={elem} label={elem} {...a11yProps(index)}></Tab>)}
          </Tabs>
          {dataToDisplay.map((elem, index) => <TabPanel key={elem} index={index} value={value}>{value}</TabPanel>)}
        </div>
        )}
        {service.status === 'error' && (
          <div>Error, the backend moved to the dark side.</div>
        )}
      </div>
    )
}

export default SuffixSelector;